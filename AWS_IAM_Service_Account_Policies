AWS IAM Service Account Policies
1.	Purpose of this guide 
2.	Future RoadMap
3.	AWS Policy updates and changes
4.	Policy Guidelines
•	Structure and organize the policy for readability.
•	Confirm size limitations are not met and syntax is correct.
•	Confirm actions limitation.
•	Naming standards.
•	Use Access Advisor.
•	Inspect CloudTrail Logs.
5.	Helpful Tips
6.	Sample Access Patterns
•	Conditionals
o	TDP conditional
o	Regional Conditional
7.	IAM
•	AssumeRole
•	PassRole
8.	Examples
•	S3
•	SES
o	Pattern references for limiting usage
o	Bad SES Example Policy that will not be approved
o	Better SES Example Policy that may be approved
•	STS
•	SSM
•	Secrets Manager
•	NonProd Deployment Service Account Example Policy

Purpose of the Guide
The following information is to guide developers on how to build AWS IAM
Service Account Policies with access to services for infrastructure automation without allowing for overly permissive actions. These actions are added by AWS. AIl IAM user policies, both pre-existing and new, are reviewed using the same requirements (i.e. something previously approved may no longer meet updated requirements

Future Roadmap
The security team is looking at Role Analysis tools that will recommend more restrictive policies. Once a tool is implemented, we will review previously approved roles/ policies and reduce access based on actual usage as appropriate.

AWS Policy Updates and Changes
Updates and changes made to this document based on security pattern changes or service actions added by AWs will be communicated accordingly by the security team.
Also, automated notifications about updates to this document will be sent to everyone that follows or watches this page.

Policy Guidelines

Structure and organize the policy for readability.
Just like code, policies are a lot easier to maintain and troubleshoot when they are cleanly written. They are easier to read when statements are combined, and the actions are alphabetized. Statements can be combined without any problems so long as the effect and the resource are the same.


After combining the action into a single statement, an option is to copy the block of actions into a text file and sort it is using the sort command in Linux. A VSCode or IntelliJ plugin can also be used to help sort IAM policies "Sort AWS IAM Policy" has been tested. It's pretty new but can help with sorting policies to improve readability.


Confirm size limitations are not met and syntax is correct.
AWS policy character size limit is 6,144. If the limit is reached, split your policy into multiple policies and files, submitting policies over the character limit may be rejected and will cause delay and rework for everyone. The following can be used to determine if the policy will reach size limits:

•	On Linux based (or Mad) system use the following command: 
tr-d '[:space:] ‘ < example_svc_policy_01.json | wc -c

•	Use AWS IAM, create a policy and validate size. This also helps find JSON Syntax issues. Note, that there are JSON Linters that can help with this as well.
•	Use VSCode or IntelliJ, create a policy and validate size.

Confirm actions limitation.
IAM supports approximately 40 actions for a user resource, including the following actions. CreateUser, DeleteUser, GetUser and UpdateUser


Naming standards.
Name policy files to match the service account name. For example, if the Service Account is named oclc-jenkins _nonprod _svc, name your policy oclc-jenkins _nonprod _svc policy.json
If you have multiple files due to size limits, you and add_01 02 etc
e.g: oclc-jenkins _nonprod _svc policy01.json, jenkins _nonprod _svc policy02.json, etc.



Use Access Advisor.
When narrowing the policy utilize Access Advisor.

Image here

Access Advisor shows the services that a user 'is granted permission to, and when that service was last accessed by the user. But be aware, AWS: states that recent activity usually appears within 4 hours so it may take some time before you can audit using this tool.

As pointed out in the AWS Blog, last access refers to the last time an authenticated request was made to that service, regardless of whether or not the user was actually authorized to perform that. action. And while Access Advisor can tell you which services you don't need access to you’ll need to check the CloudTrail logs it you want to check for access to specific API calls.

Inspect CloudTrail Logs
Audit the EventNames which reveal the APls being called.

Helpful Tips

Ways to ensure policy conforms to company’s standards.
•	Start with this policy example as a baseline for all new policies. Make sure to adjust resource ARNs as needed.
•	Add any additional services/actions that you’ll need. We a are note concerned with adding actions/resources with “*” where they are not explicitly mentioned in the guideline.
•	Delete any services that you don't use at all to remain under the 6.144-character limit.
•	Follow the policy naming convention.
•	Do not rename an existing policy that was updated, let git handle the version control.

Sample Access Patterns
The sample below is intended as a guide to assist teams with creating the custom patterns.

Conditionals
These are properties that can be used to limit the ability for an attacker to leverage the authentication created. Example of conditionals can be the IP address of a Jenkins host, a tag applied to an instance, a time of day, a region, VPC endpoints, a user agent. Each conditional can be applied depending on the service being called, as well as, understanding the infrastructure that is using the authentication. Conditionals are properties that will validate the entity making the API call is the entity that is meant to use the authentication. This means home IP addresses, non Oclc owned IP's or other non oclc affiliated infrastructure will need to be reviewed and documented prior to implementation.

{
    "Effect": "Deny",
    "Action": "*",
    "Resource": "*",
    "Condition": {
        "NotIpAddress": {
            "aws:Sourcelp": [
              "10.23.22.10/32",
              "10.20.14.19/32"
            ]
         },
         "StringNotEquals":{
            "aws: sourceVpce": "vpce-06cf53a4880860bbe"
         },
         "Boo1":{
          "aws: ViaAWSService": false
         }
         
    }
  
}

IAM
AssumeRole
PassRole


Examples

S3
ARN must be specified.
{
    "Sid": "S3ReadWriteAccess",
    "Effect": "Allow",
    "Action": [
        "s3:Get*",
        "s3:CreateBucket",
        "s3ReadWriteAccess",
        "s3:DeleteBucket*",
        "s3:Put*"
    ],
    "Resource": [
      "arn:aws:s3:::bucketname*"
    ]
}

SES
Pattern references for limiting usage
Bad SES Example Policy that will not be approved
Better SES Example Policy that may be approved
STS

SSM
ARN must be specified.
{
    "Sid": "ParameterStoreWriteAccess",
    "Effect": "Allow",
    "Action": [
        "ssm:AddTagsToResource",
        "ssm:CreateAssociation",
        "ssm:CreateDocument",
        "ssm:DeleteParameter*",
        "ssm:PutParameter"
    ],
    "Resource": [
      "arn:aws:ssm:*:123456789012:association*/bucketname*",
      "arn:aws:ssm:*:123456789012:document*/bucketname*",
      "arn:aws:ssm:*:123456789012:instance*/bucketname*"
    ]
}

Secrets Manager
ARN must be specified.
{
    "Sid": "SecretsReadWriteAccess",
    "Effect": "Allow",
    "Action": [
        "secretsmanager:CreateSecret",
        "secretsmanager:Delete*",
        "secretsmanager:Get*",
        "secretsmanager:UpdateSecret",
        "secretsmanager:Put*"
    ],
    "Resource": [
      "arn:aws:secretsmanager:*:123456789012:secret:name*"
    ]
}


NonProd Deployment Service Account Example Policy

{
    "Sid": "VisualEditor2",
    "Effect": "Allow",
    "Action": [
        "acm:*",
        "apigateway:",
        "application-autoscaling:*",
        "autoscaling-plans:*",
        "batch:*",
        "cloudfront:*",
        "cloudformation:*",
        "cloudwatch:*",
        "dynamodb: *",
        "ec2:*",
        "ecr:*",
        "eks: *",
        "elasticfilesystem:*",
        "elasticloadbalancing:*",
        "fsx:*",
        "kms:*",
        "kinesis:*",
        "firehose: *",
        "lambda:*",
        "logs:",
        "quicksight:*",
        "rds:*",
        "ecs:*",
        "routes3:*",
        "route53: ChangeResourceRecordsets",
        "route53:GetHostedZone",
        "route53:GetChange",
        "route53:ListHostedZones",
        "route53: ListResourceRecordSets",
        "s3:CreateBucket",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "s3:ListBucketMultipartUploads",
        "s3:ListBucketVersions",
        "s3:ListJobs",
        "s3:ListMultipartUploadParts",
        "s3;ListstoragelensConfigurations",
        "ssmmessages:*",
        "sts:GetCallerIdentity",
        "transfer: *",
        "waf:*",
        "wafv2:*"
    ],
    "Resource": "*"
}


