AWS IAM Service Account Policies
1.	Purpose of this guide 
2.	Future RoadMap
3.	AWS Policy updates and changes
4.	Policy Guidelines
•	Structure and organize the policy for readability.
•	Confirm size limitations are not met and syntax is correct.
•	Confirm actions limitation.
•	Naming standards.
•	Use Access Advisor.
•	Inspect CloudTrail Logs.
5.	Helpful Tips
6.	Sample Access Patterns
•	Conditionals
o	TDP conditional
o	Regional Conditional
7.	IAM
•	AssumeRole
•	PassRole
8.	Examples
•	S3
•	SES
o	Pattern references for limiting usage
o	Bad SES Example Policy that will not be approved
o	Better SES Example Policy that may be approved
•	STS
•	SSM
•	Secrets Manager
•	NonProd Deployment Service Account Example Policy

Purpose of the Guide
The following information is to guide developers on how to build AWS IAM
Service Account Policies with access to services for infrastructure automation without allowing for overly permissive actions. These actions are added by AWS. AIl IAM user policies, both pre-existing and new, are reviewed using the same requirements (i.e. something previously approved may no longer meet updated requirements

Future Roadmap
The security team is looking at Role Analysis tools that will recommend more restrictive policies. Once a tool is implemented, we will review previously approved roles/ policies and reduce access based on actual usage as appropriate.

AWS Policy Updates and Changes
Updates and changes made to this document based on security pattern changes or service actions added by AWs will be communicated accordingly by the security team.
Also, automated notifications about updates to this document will be sent to everyone that follows or watches this page.

Policy Guidelines

Structure and organize the policy for readability.
Just like code, policies are a lot easier to maintain and troubleshoot when they are cleanly written. They are easier to read when statements are combined, and the actions are alphabetized. Statements can be combined without any problems so long as the effect and the resource are the same.


After combining the action into a single statement, an option is to copy the block of actions into a text file and sort it is using the sort command in Linux. A VSCode or IntelliJ plugin can also be used to help sort IAM policies "Sort AWS IAM Policy" has been tested. It's pretty new but can help with sorting policies to improve readability.


Confirm size limitations are not met and syntax is correct.
AWS policy character size limit is 6,144. If the limit is reached, split your policy into multiple policies and files, submitting policies over the character limit may be rejected and will cause delay and rework for everyone. The following can be used to determine if the policy will reach size limits:

•	On Linux based (or Mad) system use the following command: 
tr-d '[:space:] ‘ < example_svc_policy_01.json | wc -c

•	Use AWS IAM, create a policy and validate size. This also helps find JSON Syntax issues. Note, that there are JSON Linters that can help with this as well.
•	Use VSCode or IntelliJ, create a policy and validate size.

Confirm actions limitation.
IAM supports approximately 40 actions for a user resource, including the following actions. CreateUser, DeleteUser, GetUser and UpdateUser


Naming standards.
Name policy files to match the service account name. For example, if the Service Account is named oclc-jenkins _nonprod _svc, name your policy oclc-jenkins _nonprod _svc policy.json
If you have multiple files due to size limits, you and add_01 02 etc
e.g: oclc-jenkins _nonprod _svc policy01.json, jenkins _nonprod _svc policy02.json, etc.



Use Access Advisor.
When narrowing the policy utilize Access Advisor.

Image here

Access Advisor shows the services that a user 'is granted permission to, and when that service was last accessed by the user. But be aware, AWS: states that recent activity usually appears within 4 hours so it may take some time before you can audit using this tool.

As pointed out in the AWS Blog, last access refers to the last time an authenticated request was made to that service, regardless of whether or not the user was actually authorized to perform that. action. And while Access Advisor can tell you which services you don't need access to you’ll need to check the CloudTrail logs it you want to check for access to specific API calls.

Inspect CloudTrail Logs
Audit the EventNames which reveal the APls being called.

Helpful Tips

Ways to ensure policy conforms to company’s standards.
•	Start with this policy example as a baseline for all new policies. Make sure to adjust resource ARNs as needed.
•	Add any additional services/actions that you’ll need. We a are note concerned with adding actions/resources with “*” where they are not explicitly mentioned in the guideline.
•	Delete any services that you don't use at all to remain under the 6.144-character limit.
•	Follow the policy naming convention.
•	Do not rename an existing policy that was updated, let git handle the version control.

Sample Access Patterns
The sample below is intended as a guide to assist teams with creating the custom patterns.

Conditionals
These are properties that can be used to limit the ability for an attacker to leverage the authentication created. Example of conditionals can be the IP address of a Jenkins host, a tag applied to an instance, a time of day, a region, VPC endpoints, a user agent. Each conditional can be applied depending on the service being called, as well as, understanding the infrastructure that is using the authentication. Conditionals are properties that will validate the entity making the API call is the entity that is meant to use the authentication. This means home IP addresses, non Oclc owned IP's or other non oclc affiliated infrastructure will need to be reviewed and documented prior to implementation.

{
    "Effect": "Deny",
    "Action": "*",
    "Resource": "*",
    "Condition": {
        "NotIpAddress": {
            "aws:Sourcelp": [
              "10.23.22.10/32",
              "10.20.14.19/32"
            ]
         },
         "StringNotEquals":{
            "aws: sourceVpce": "vpce-06cf53a4880860bbe"
         },
         "Boo1":{
          "aws: ViaAWSService": false
         }
         
    }
  
}

IAM
AssumeRole
PassRole


Examples

S3
ARN must be specified.
{
    "Sid": "S3ReadWriteAccess",
    "Effect": "Allow",
    "Action": [
        "s3:Get*",
        "s3:CreateBucket",
        "s3ReadWriteAccess",
        "s3:DeleteBucket*",
        "s3:Put*"
    ],
    "Resource": [
      "arn:aws:s3:::bucketname*"
    ]
}

SES
Pattern references for limiting usage
Bad SES Example Policy that will not be approved
Better SES Example Policy that may be approved
STS

SSM
ARN must be specified.
{
    "Sid": "ParameterStoreWriteAccess",
    "Effect": "Allow",
    "Action": [
        "ssm:AddTagsToResource",
        "ssm:CreateAssociation",
        "ssm:CreateDocument",
        "ssm:DeleteParameter*",
        "ssm:PutParameter"
    ],
    "Resource": [
      "arn:aws:ssm:*:123456789012:association*/bucketname*",
      "arn:aws:ssm:*:123456789012:document*/bucketname*",
      "arn:aws:ssm:*:123456789012:instance*/bucketname*"
    ]
}

Secrets Manager
ARN must be specified.
{
    "Sid": "SecretsReadWriteAccess",
    "Effect": "Allow",
    "Action": [
        "secretsmanager:CreateSecret",
        "secretsmanager:Delete*",
        "secretsmanager:Get*",
        "secretsmanager:UpdateSecret",
        "secretsmanager:Put*"
    ],
    "Resource": [
      "arn:aws:secretsmanager:*:123456789012:secret:name*"
    ]
}


NonProd Deployment Service Account Example Policy

{
    "Sid": "VisualEditor2",
    "Effect": "Allow",
    "Action": [
        "acm:*",
        "apigateway:",
        "application-autoscaling:*",
        "autoscaling-plans:*",
        "batch:*",
        "cloudfront:*",
        "cloudformation:*",
        "cloudwatch:*",
        "dynamodb: *",
        "ec2:*",
        "ecr:*",
        "eks: *",
        "elasticfilesystem:*",
        "elasticloadbalancing:*",
        "fsx:*",
        "kms:*",
        "kinesis:*",
        "firehose: *",
        "lambda:*",
        "logs:",
        "quicksight:*",
        "rds:*",
        "ecs:*",
        "routes3:*",
        "route53: ChangeResourceRecordsets",
        "route53:GetHostedZone",
        "route53:GetChange",
        "route53:ListHostedZones",
        "route53: ListResourceRecordSets",
        "s3:CreateBucket",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "s3:ListBucketMultipartUploads",
        "s3:ListBucketVersions",
        "s3:ListJobs",
        "s3:ListMultipartUploadParts",
        "s3;ListstoragelensConfigurations",
        "ssmmessages:*",
        "sts:GetCallerIdentity",
        "transfer: *",
        "waf:*",
        "wafv2:*"
    ],
    "Resource": "*"
}

................................................................
Version 2 update from ChatGTP
................................................................

1. Purpose of This Guide
The purpose of this guide is to provide developers and administrators with detailed instructions for building AWS IAM Service Account Policies. These policies enable secure access to AWS services for infrastructure automation while avoiding overly permissive actions. All IAM user policies, both pre-existing and new, are reviewed under these requirements. Previously approved policies may no longer meet updated security standards.

2. Future Roadmap
Role Analysis Tools: The security team is evaluating tools that recommend more restrictive policies based on actual usage patterns. These tools will be implemented to review previously approved roles and policies, reducing access as necessary.
Timeline for Review: Regular reviews of IAM roles and policies will occur every 6 months or upon major updates to AWS services.
Automation and AI: Investigate automated policy validation tools to streamline approval processes and ensure compliance.

3. AWS Policy Updates and Changes
Updates to this document will be based on changes in AWS security patterns, new service actions, and feedback from policy reviews.
The security team will communicate changes via email and the documentation platform. Automated notifications will also alert followers of updates.
Version control will track policy document changes, with older versions archived for reference.

4. Policy Guidelines
a. Structure and Organize Policies for Readability
Combine related actions into a single statement if the Effect and Resource are the same.
Alphabetize actions for consistency and clarity.
Use tools like VSCode plugins (e.g., “Sort AWS IAM Policy”) or command-line utilities for sorting and validating JSON.
b. Confirm Size Limitations and Syntax
IAM policies have a character limit of 6,144 characters. Split policies into multiple smaller files if necessary.
Tools to validate size and syntax:
Command-line: tr -d '[:space:]' < example_svc_policy_01.json | wc -c
AWS Management Console policy editor.
JSON linters available in IDEs like VSCode or IntelliJ.
c. Confirm Actions Limitation
Limit each policy to approximately 40 actions per resource. For example:
Allowed actions: CreateUser, DeleteUser, GetUser, UpdateUser.
Exceeding this number may lead to performance and readability issues.
d. Naming Standards
Use clear, consistent naming for policy files. Example:
Service Account: oclc-jenkins_nonprod_svc
Policy name: oclc-jenkins_nonprod_svc_policy.json
For split files: oclc-jenkins_nonprod_svc_policy01.json, ...policy02.json.
e. Use Access Advisor
Review Access Advisor data to identify unused permissions and narrow policies accordingly.
Be aware of AWS Access Advisor limitations: updates may take up to 4 hours, and API calls may require additional verification using CloudTrail logs.
f. Inspect CloudTrail Logs
Use CloudTrail logs to audit API calls (EventNames) and validate policy effectiveness.
Filter logs for EventSource and EventName to focus on specific services and actions.


5. Helpful Tips
Start with Templates: Use a baseline policy template and adjust resources and actions as needed.
Avoid Wildcards (*): Replace * with specific ARNs or resources whenever possible.
Follow Naming Conventions: Ensure all policies adhere to established naming standards.
Version Control: Use Git for versioning and avoid renaming existing policy files.


6. Sample Access Patterns
a. Conditionals
Conditionals limit access to specific use cases. Examples:

Restrict access to specific IPs or regions:

{
    "Effect": "Deny",
    "Action": "*",
    "Resource": "*",
    "Condition": {
        "NotIpAddress": {
            "aws:SourceIp": ["10.23.22.10/32", "10.20.14.19/32"]
        },
        "StringNotEquals": {
            "aws:sourceVpce": "vpce-06cf53a4880860bbe"
        }
    }
}


7. Examples
a. S3 Policy
Allow specific bucket actions:

{
    "Sid": "S3ReadWriteAccess",
    "Effect": "Allow",
    "Action": [
        "s3:Get*",
        "s3:Put*",
        "s3:DeleteBucket"
    ],
    "Resource": "arn:aws:s3:::bucketname*"
}


b. Secrets Manager Policy
Restrict actions to specific secrets:

{
    "Sid": "SecretsReadWriteAccess",
    "Effect": "Allow",
    "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:UpdateSecret"
    ],
    "Resource": "arn:aws:secretsmanager:*:123456789012:secret:name*"
}


c. NonProd Deployment Example Policy
Broad permissions for non-production deployments:

{
    "Sid": "NonProdDeployment",
    "Effect": "Allow",
    "Action": [
        "ec2:*",
        "s3:CreateBucket",
        "cloudwatch:*",
        "rds:*"
    ],
    "Resource": "*"
}


8. Review Process
Initial Review: Policies will be reviewed by the security team for adherence to guidelines.
Approval: Once validated, policies will be version-controlled and deployed.
Ongoing Monitoring: CloudTrail and Access Advisor will be used to monitor policy usage.

Final Notes
Regularly update policies as services and requirements evolve.
Encourage teams to consult the security team for guidance when unsure about best practices.


